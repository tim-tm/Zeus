package me.tim.features.module.impl.exploit;

import me.tim.Statics;
import me.tim.features.event.EventJoin;
import me.tim.features.event.EventPacket;
import me.tim.features.event.EventUpdate;
import me.tim.features.event.api.EventTarget;
import me.tim.features.module.Category;
import me.tim.features.module.Module;
import me.tim.ui.click.settings.impl.ModeSetting;
import me.tim.ui.click.settings.impl.NumberSetting;
import me.tim.util.Timer;
import me.tim.util.common.EnumUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.status.client.C01PacketPing;
import org.lwjgl.input.Keyboard;

import java.util.LinkedList;
import java.util.UUID;

public class Disabler extends Module {
    private ModeSetting modeSetting;
    private NumberSetting pingSetting;

    private final LinkedList<PacketData> packets;
    private final Timer timer;
    private DisablerMode mode;

    public Disabler() {
        super("Disabler", "Disable anticheats!", Keyboard.KEY_NONE, Category.EXPLOIT);
        this.packets = new LinkedList<>();
        this.timer = new Timer();
    }

    @Override
    protected void setupSettings() {
        this.settings.add(this.modeSetting = new ModeSetting("Mode", "Mode of exploitation!", DisablerMode.values(), DisablerMode.PINGSPOOF));
        this.settings.add(this.pingSetting = new NumberSetting("Spoofed-Ping", "How much do you want to lag?", 150, 5000, 500));
    }

    @EventTarget
    private void onUpdate(EventUpdate eventUpdate) {
        this.mode = (DisablerMode) EnumUtil.fromName(this.modeSetting.getCurrentMode().getName(), DisablerMode.values());
        if (this.mode == null) return;

        this.setSuffix(this.mode.getName());
        this.pingSetting.setVisible(this.mode.equals(DisablerMode.PINGSPOOF));

        switch (this.mode) {
            case PINGSPOOF:
                for (int i = 0; i < this.packets.size(); i++) {
                    PacketData data = this.packets.get(i);
                    if (System.currentTimeMillis() - data.getTime() >= this.pingSetting.getValue()) {
                        Statics.sendPacketNoEvent(data.getPacket());
                        this.packets.remove(data);
                        i--;
                    }
                }
                break;
            case EUMEL:
                if (Statics.getPlayer().ticksExisted % 2 == 0) {
                    Statics.sendPacket(new C0CPacketInput());
                    Statics.sendPacket(new C18PacketSpectate(UUID.randomUUID()));
                }
                break;
        }
    }

    @EventTarget
    private void onPacket(EventPacket eventPacket) {
        if (this.mode == null) return;

        switch (this.mode) {
            case PINGSPOOF:
                if (eventPacket.getPacket() instanceof C00PacketKeepAlive || eventPacket.getPacket() instanceof C0FPacketConfirmTransaction || eventPacket.getPacket() instanceof C01PacketPing) {
                    this.packets.add(new PacketData(eventPacket.getPacket()));
                    eventPacket.setCancelled(true);
                }
                break;
        }
    }

    @EventTarget
    private void onJoin(EventJoin eventJoin) {
        this.packets.clear();
    }

    @Override
    public void onDisable() {
        super.onDisable();
        if (Statics.getPlayer() != null) {
            while (this.packets.size() > 0) {
                Statics.sendPacketNoEvent(this.packets.poll().getPacket());
            }
        }
        this.timer.reset();
    }

    private enum DisablerMode implements ModeSetting.ModeTemplate {
        PINGSPOOF("PingSpoof"),
        EUMEL("Eumel");

        private final String name;

        DisablerMode(String name) {
            this.name = name;
        }

        @Override
        public String getName() {
            return name;
        }
    }

    private final static class PacketData {
        private final Packet<?> packet;
        private final long time;

        public PacketData(Packet<?> packet) {
            this.packet = packet;
            this.time = System.currentTimeMillis();
        }

        public Packet<?> getPacket() {
            return packet;
        }

        public long getTime() {
            return time;
        }
    }
}
